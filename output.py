import Node
import matplotlib.pyplot as plt
import numpy as np
from math import sqrt

from sklearn.metrics import roc_curve, auc
import random
def rmse_calc(actual, predicted):
	sum_error = 0.0
	for i in range(len(actual)):
		error = predicted[i] - actual[i]
		sum_error += (error ** 2)
	mean_error = sum_error / float(len(actual))
	return sqrt(mean_error)

data = [[]]
f = open('test.csv')
for line in f:
	line = line.strip("\r\n")
	data.append(line.split(','))
data.remove([])
random.shuffle(data)
actual=[]
label=[]
count1=0
for row in data:
	if (row[-1] in label):
		i=0
	else:
		label.append(row[-1])
for row in data:
	if row[-1]==label[0]:
		row[-1]=1
	else:
		row[-1]=0
	actual.append(row[-1])
	count1+=1
tree = {'\xef\xbb\xbfandroid.permission.READ_SYNC_STATS': {'1': {'com.htc.permission.APP_PLATFORM': {'0': {'com.bartaman.patrika.permission.C2D_MESSAGE': {'1': 1, '0': 0}}}}}}
attributes = ['\xef\xbb\xbfandroid.permission.READ_SYNC_STATS', 'com.htc.permission.APP_PLATFORM', 'com.bartaman.patrika.permission.C2D_MESSAGE', 'com.wAppzmob.permission.C2D_MESSAGE', 'android.permission.READ_FRAME_BUFFER', 'kr.co.openit.bpdiary.permission.C2D_MESSAGE', 'com.android.permission.mewidget_contact', 'com.lw.wp8xlauncher.permission.C2D_MESSAGE', 'com.cyworld.camera.permission.C2D_MESSAGE', 'android.permission.READ_CONTACTS', 'com.commsource.beautyplus.permission.C2D_MESSAGE', 'android.permission.MODIFY_PHONE_STATE', 'android.permission.BROADCAST_PACKAGE_REMOVED', 'android.permission.MANAGE_APP_TOKENS', 'com.google.android.apps.photos.permission.GOOGLE_PHOTOS', 'com.gm.despegar.permission.C2D_MESSAGE', 'com.ticktockapps.android_wallpapers.permission.C2D_MESSAGE', 'com.abclauncher.launcher.permission.RECEIVE_LAUNCH_BROADCASTS', 'com.majeur.launcher.permission.UPDATE_BADGE', 'com.htc.launcher.permission.WRITE_SETTINGS', 'android.permission.DOWNLOAD_WITHOUT_NOTIFICATION', 'android.permission.FLASHLIGHT', 'android.permission.RECEIVE_MMS', 'rockchip.permission.FULL_SCREEN', 'android.permission.WRITE_MEDIA_STORAGE', 'com.aryservices.arynews.en.permission.C2D_MESSAGE', 'at.itagents.ta.CENTRAL_SERVICE_PERMISSION', 'com.amazon.dcp.config.permission.DYN_CONFIG_VALUES_UPDATED', 'android.permission.READ_APN_SETTINGS', 'android.permission.PERSISTENT_ACTIVITY', 'com.ogqcorp.bgh.permission.C2D_MESSAGE', 'com.cyworld.camera.permission.MAPS_RECEIVE', 'android.permission.FORCE_BACK', 'com.abclauncher.launcher.permission.WRITE_SETTINGS', 'jp.kyocera.kyocerahome.launcher.permission.READ_SETTINGS', 'com.google.android.c2dm.permission.RECEIVE', 'android.permission.ADD_SYSTEM_SERVICE', 'android.permission.SET_TIME_ZONE', 'android.permission.SET_ORIENTATION', 'com.epi.permission.C2D_MESSAGE', 'android.permission.DISABLE_STATUS_BAR', 'com.appeteria.battery100alarm.permission.C2D_MESSAGE', 'android.permission.CHANGE_WIFI_STATE', 'android.permission.RECEIVE_SMS', 'android.permission.SET_ANIMATION_SCALE', 'android.permission.SET_PROCESS_LIMIT', 'com.winit.starnews.hin.permission.C2D_MESSAGE', 'com.sraoss.dmrc.permission.MAPS_RECEIVE', 'com.oppo.launcher.permission.READ_SETTINGS', 'android.permission.SUBSCRIBED_FEEDS_READ', 'android.permission.ACCESS_CHECKIN_PROPERTIES', 'com.diabetescontrol.permission.C2D_MESSAGE', 'android.permission.BROADCAST_SMS', 'com.cam001.selfie361.permission.C2D_MESSAGE', 'com.amazon.identity.permission.CAN_CALL_MAP_INFORMATION_PROVIDER', 'com.superapps.browser.permission.ACCESS_DOWNLOAD_MANAGER', 'com.amazon.dcp.settings.permission.READ_SETTINGS', 'android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED', 'com.sec.android.app.gallery3d.READ', 'com.data.metro.services.permission.C2D_MESSAGE', 'bbc.mobile.news.ww.permission.C2D_MESSAGE', 'com.qihoo.antivirus.update.permission.i18n_security', 'android.permission.SET_ALARM', 'com.qihoo360.screenlock.permission.WRITE_LOCAL_THEME', 'com.kaldwi.jagrandesigns.permission.C2D_MESSAGE', 'com.simulatormedicalapps.bloodsugartestprank01.permission.C2D_MESSAGE', 'android.permission.READ_SYNC_SETTINGS', 'com.amazon.permission.FORCE_AUTH_ACCT', 'com.htc.launcher.permission.UPDATE_SHORTCUT', 'com.ak.ta.dainikbhaskar.activity.permission.C2D_MESSAGE', 'com.superapps.browser.permission.SEND_DOWNLOAD_COMPLETED_INTENTS', 'android.permission.ACCESS_WEATHERCLOCK_PROVIDER', 'com.sec.android.provider.badge.permission.READ', 'android.permission.ACCESS_MOCK_LOCATION', 'com.jp.jagran.permission.C2D_MESSAGE', 'deezer.android.app.permission.C2D_MESSAGE', 'com.huawei.android.launcher.permission.READ_SETTINGS', 'com.qihoo360.launcher.permission.READ_SETTINGS', 'android.permission.INJECT_EVENTS', 'android.permission.READ_CALENDAR', 'com.ksmobile.launcher.permission.READ_SETTINGS', 'android.permission.RECORD_AUDIO', 'com.ionicframework.banglamagicmaster842577.permission.C2D_MESSAGE', 'android.permission.BLUETOOTH', 'uk.co.sevendigital.installation.information.ACCESS', 'com.applabb.daily.newshunt.india.hindi.permission.C2D_MESSAGE', 'com.android.launcher3.permission.READ_SETTINGS', 'android.permission.WRITE_USER_DICTIONARY', 'com.amazon.dcp.messaging.permission.HANDLE_DEVICE_MESSAGE', 'com.nd.android.launcher91.permission.WRITE_SETTINGS', 'org.zeam.permission.READ_SETTINGS', 'com.amazon.dcp.metrics.permission.METRICS_PERMISSION', 'com.sec.chaton.permission.C2D_MESSAGE', 'com.huawei.android.totemweather.permission.ACCESS_WEATHERCLOCK_PROVIDER', 'com.traber.blueappsender.permission.C2D_MESSAGE', 'com.zeenews.marathinews.permission.C2D_MESSAGE', 'android.permission.SUBSCRIBED_FEEDS_WRITE', 'com.the7art.clockwallpaperlib.permission.PUSH_MESSAGE_RECEIVE', 'com.amazon.appmanager.preload.permission.READ_PRELOAD_DEVICE_INFO_PROVIDER', 'android.permission.ACCESS_FINE_LOCATION', 'class']
count = 0
tp=0
tn=0
fp=0
fn=0
print("no.\tActual\tPredicted")
predicted=[]
for row in data:
	count += 1
	tempDict = tree.copy()
	result = ""
	while(isinstance(tempDict, dict)):
		root = Node.Node(tempDict.keys()[0], tempDict[tempDict.keys()[0]])
		tempDict = tempDict[tempDict.keys()[0]]
		index = attributes.index(root.value)
		value = row[index]
		if(value in tempDict.keys()):
			child = Node.Node(value, tempDict[value])
			result = tempDict[value]
			tempDict = tempDict[value]
		else:
			#print "Error in input %s" % count
			result = -1
			break

	predicted.append(result)
	if (row[-1]==1 and result==1):
		tp+=1
	elif (row[-1]==1 and result==0):
		fn+=1
	elif (row[-1]==0 and result==0):
		tn+=1
	elif (row[-1]==0 and result==1):
		fp+=1
	print ("%s\t%s\t%s" % (count,label[row[-1]],label[result]))
rmse = rmse_calc(actual, predicted)
print("rmse=%s"%rmse)
if(tp==0):
	tp+=0.001
if(fp==0):
	fp+=0.001
if(fn==0):
	fn+=0.001
if(tn==0):
	tn+=0.001
precision=tp/(float)(tp+fp)
recall=tp/(float)(tp+fn)
accuracy=(tp+tn)/(float)(tp+tn+fp+fn)
f1_score=(2*precision*recall)/(float)(precision+recall)
plt.xlim([-0.1,1.2])
plt.ylim([-0.1,1.2])
tpr=tp/(tp+fn)
fpr=fp/(tn+fp)
print ("precision= %s" % precision)
print ("recall= %s" % recall)
print ("accuracy= %s" % accuracy)
print ("f1 score= %s" % (f1_score))
print ("tpr= %s" % (tpr))
print ("fpr= %s" % (fpr))
fpr, tpr, thresholds = roc_curve(actual, predicted)
roc_auc = auc(fpr, tpr)
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label='AUC = %0.2f'% roc_auc)
plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'r--')
plt.xlim([-0.1,1.2])
plt.ylim([-0.1,1.2])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
