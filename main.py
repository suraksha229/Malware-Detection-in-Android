import decisiontree
import random

def main():
   
    file = open('train.csv')

    target = "class"
    data = [[]]
    for row in file:
        row = row.strip("\r\n")
        data.append(row.split(','))
    data.remove([])
    attributes = data[0]
    data.remove(attributes)
    random.shuffle(data)
    label=[]

    for row in data:
        if (row[-1] in label):
            i=0 #dummy stmt
        else:      
            label.append(row[-1])

    for row in data:
        if row[-1]==label[0]:
            row[-1]=1
        else:
            row[-1]=0
    #Generate decision tree using ID3 algorithm
    tree = decisiontree.buildtree(data, attributes, target, 0)
   
    #start writing into output file(output.py)
    file = open('output.py', 'w')
    file.write("import Node\n")
    file.write("import matplotlib.pyplot as plt\n")
    file.write("import numpy as np\n")
    file.write("from math import sqrt\n\n")
    file.write("from sklearn.metrics import roc_curve, auc\n")
    file.write("import random\n")

    file.write("def rmse_calc(actual, predicted):\n")
    file.write("\tsum_error = 0.0\n")
    file.write("\tfor i in range(len(actual)):\n")
    file.write("\t\terror = predicted[i] - actual[i]\n")
    file.write("\t\tsum_error += (error ** 2)\n")
    file.write("\tmean_error = sum_error / float(len(actual))\n")
    file.write("\treturn sqrt(mean_error)\n\n")

    file.write("data = [[]]\n")
    file.write("f = open('test.csv')\n")
    file.write("for line in f:\n\tline = line.strip(\"\\r\\n\")\n\tdata.append(line.split(','))\n")
    file.write("data.remove([])\n")
    file.write("random.shuffle(data)\n")

    file.write("actual=[]\n")
    file.write("label=[]\n")
    file.write("count1=0\n")
    file.write("for row in data:\n")
    file.write("\tif (row[-1] in label):\n\t\ti=0\n")
    file.write("\telse:\n\t\tlabel.append(row[-1])\n")

    file.write("for row in data:\n")
    file.write("\tif row[-1]==label[0]:\n\t\trow[-1]=1\n")
    file.write("\telse:\n\t\trow[-1]=0\n")

    file.write("\tactual.append(row[-1])\n\tcount1+=1\n")

    file.write("tree = %s\n" % str(tree))
    file.write("attributes = %s\n" % str(attributes)) 

    file.write("count = 0\ntp=0\ntn=0\nfp=0\nfn=0\n")   
    file.write("print(\"no.\\tActual\\tPredicted\")\n")
    file.write("predicted=[]\n")

    file.write("for row in data:\n")
    file.write("\tcount += 1\n")
    file.write("\ttempDict = tree.copy()\n")
    file.write("\tresult = \"\"\n")
    file.write("\twhile(isinstance(tempDict, dict)):\n")
    file.write("\t\troot = Node.Node(tempDict.keys()[0], tempDict[tempDict.keys()[0]])\n\t\ttempDict = tempDict[tempDict.keys()[0]]\n\t\tindex = attributes.index(root.value)\n\t\tvalue = row[index]\n\t\t")
    file.write("if(value in tempDict.keys()):\n")
    file.write("\t\t\tchild = Node.Node(value, tempDict[value])\n\t\t\t")
    file.write("result = tempDict[value]\n\t\t\t")
    file.write("tempDict = tempDict[value]\n\t\t")
    file.write("else:\n\t\t\t")
    file.write("#print \"Error in input %s\" % count\n")
    file.write("\t\t\tresult = -1\n\t\t\tbreak\n\n")

    file.write("\tpredicted.append(result)\n")
    file.write("\tif (row[-1]==1 and result==1):\n")
    file.write("\t\ttp+=1\n")
    file.write("\telif (row[-1]==1 and result==0):\n")
    file.write("\t\tfn+=1\n")
    file.write("\telif (row[-1]==0 and result==0):\n")
    file.write("\t\ttn+=1\n")
    file.write("\telif (row[-1]==0 and result==1):\n")
    file.write("\t\tfp+=1\n")
    file.write("\tprint (\"%s\\t%s\\t%s\" % (count,label[row[-1]],label[result]))\n")

    file.write("rmse = rmse_calc(actual, predicted)\n")
    file.write("print(\"rmse=%s\"%rmse)\n")
    
    file.write("if(tp==0):\n\ttp+=0.001\n")
    file.write("if(fp==0):\n\tfp+=0.001\n")
    file.write("if(fn==0):\n\tfn+=0.001\n")
    file.write("if(tn==0):\n\ttn+=0.001\n")
    
    file.write("precision=tp/(float)(tp+fp)\n")
    file.write("recall=tp/(float)(tp+fn)\n")
    file.write("accuracy=(tp+tn)/(float)(tp+tn+fp+fn)\n")
    file.write("f1_score=(2*precision*recall)/(float)(precision+recall)\n")

    file.write("plt.xlim([-0.1,1.2])\n")
    file.write("plt.ylim([-0.1,1.2])\n")
    file.write("tpr=tp/(tp+fn)\n")
    file.write("fpr=fp/(tn+fp)\n")
    
    file.write("print (\"precision= %s\" % precision)\n")
    file.write("print (\"recall= %s\" % recall)\n")
    file.write("print (\"accuracy= %s\" % accuracy)\n")
    file.write("print (\"f1 score= %s\" % (f1_score))\n")
    file.write("print (\"tpr= %s\" % (tpr))\n")
    file.write("print (\"fpr= %s\" % (fpr))\n")

    file.write("fpr, tpr, thresholds = roc_curve(actual, predicted)\n")
    file.write("roc_auc = auc(fpr, tpr)\n")
    file.write("plt.title(\'Receiver Operating Characteristic\')\n")
    file.write("plt.plot(fpr, tpr, \'b\', label=\'AUC = %0.2f\'% roc_auc)\n")
    file.write("plt.legend(loc=\'lower right\')\n")
    file.write("plt.plot([0,1],[0,1],\'r--\')\n")
    file.write("plt.xlim([-0.1,1.2])\n")
    file.write("plt.ylim([-0.1,1.2])\n")
    file.write("plt.ylabel(\'True Positive Rate\')\n")
    file.write("plt.xlabel(\'False Positive Rate\')\n")
    file.write("plt.show()\n")

    
if __name__ == '__main__':
    main()
    print "done"
    

